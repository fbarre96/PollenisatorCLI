from utils.utils import command, cls_commands
from utils.utils import main_help
from utils.completer import IMCompleter
from core.Modules.module import Module
from prompt_toolkit.formatted_text import FormattedText
from core.apiclient import APIClient
from core.Models.Command import Command
from core.Models.Wave import Wave
from core.Models.Scope import Scope
from core.Models.Ip import Ip

@cls_commands
class Pentest(Module):
    def __init__(self, parent_context, prompt_session):
        super().__init__('Pentest', parent_context, "Pentesting mode.", 'Pentesting <placeholder>', IMCompleter(self), prompt_session)
        #TODO add modules
        """Modules
        =========
        Commands
        Tags
        Dashboard
        Summary
        Scan
        Report
        Settings
        Terminal
        """
    @command
    def reset_running_tools(self):
        """
        Usage : reset_running_tools
        Description : Reset all tools running to a ready state. This is useful if a command was running on a worker and the auto scanning was interrupted.
        """
        # test all the cases if datef is defined or not.
        # Normally, only the first one is necessary
        from core.Models.Tool import Tool
        tools = Tool.fetchObjects({"datef": "None", "scanner_ip": {"$ne": "None"}})
        for tool in tools:
            tool.markAsNotDone()
        tools = Tool.fetchObjects({"datef": "None", "dated": {"$ne": "None"}})
        for tool in tools:
            tool.markAsNotDone()
        tools = Tool.fetchObjects(
            {"datef": {"$exists": False}, "dated": {"$ne": "None"}})
        for tool in tools:
            tool.markAsNotDone()
        tools = Tool.fetchObjects(
            {"datef": {"$exists": False}, "scanner_ip": {"$ne": "None"}})
        for tool in tools:
            tool.markAsNotDone()

    @command
    def ls(self, object_type):
        """Usage: ls commands|waves|scopes|ips

        Description: List all objects from the given type
        """
        apiclient = APIClient.getInstance()
        if object_type == "commands":
            commands = Command.fetchObjects({}, apiclient.getCurrentPentest())
            for command in commands:
                print(str(command))
        elif object_type == "waves":
            waves = Wave.fetchObjects({})
            for wave in waves:
                print(str(wave))
        elif object_type == "scopes":
            scopes = Scope.fetchObjects({})
            for scope in scopes:
                print(str(scope))
        elif object_type == "ips":
            ips = Ip.fetchObjects({})
            for ip in ips:
                print(str(ip))
    
    @command
    def info(self, object_title):
        """Usage: info <object_title>

        Description: Show informations for the given object title:
        
        Arguments:
            object_title: a string to identify an object.
            * Scope : a network ip as x.x.x.x/y or a domain. Add "<wave_name>:" in front of scope if  many waves registered it
            * Ip: An ip or a domain
            * Port: an ip:port[/proto]
            * Wave: a wave name
            * Command: a command name
        """
        pass #TODO

    @command
    def edit(self, object_title):
        """Usage: edit <object_title>

        Description: Show informations for the given object title:
        
        Arguments:
            object_title: a string to identify an object.
            * Scope : a network ip as x.x.x.x/y or a domain. Add "<wave_name>:" in front of scope if  many waves registered it
            * Ip: An ip or a domain
            * Port: an ip:port[/proto]
            * Wave: a wave name
            * Command: a command name
        """
        pass #TODO
    @command
    def query(self, search_query):
        """Usage: query <search_query>

        Description : Print a list of object title matching the query

        Arguments:
            search_query: A python like condition with:
                            - condition operators (==, !=, >, < , <=, >=, not in, in, regex) 
                            - boolean logic (and, or, not)
            Search examples in match (python condition):
            type == "port"
            type == "port" and port == 443
            type == "port" and port regex "443$"
            type == "port" and (port == 80 or port == 443)
            type == "port" and port != 443
            type == "port" and port != 443 and port != 80
            type == "defect"
            type == "defect" and "Foo" in title
            type == "ip" and ip regex "[A-Za-z]"
            type == "ip" and ip regex "^1\.2"
            type == "tool" and "done" in status
            type == "tool" and "done" not in status
            type == "tool" and "ready" in status
            type == "ip" and infos.key == "ABC" 
        """
        pass #TODO
    
    def getOptionsForCmd(self, cmd, cmd_args, complete_event):
        """Returns a list of valid options for the given cmd
        """  
        apiclient = APIClient.getInstance()
        if cmd == "help":
            return [""]+self._cmd_list
        elif cmd == "ls":
            return ["commands", "waves", "scopes", "ips"]
        elif cmd in ["info", "edit"]:
            return [] #TODO
        elif cmd == "query":
            return [] # TODO
        return []