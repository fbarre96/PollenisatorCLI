import re
from datetime import datetime
from utils.utils import command, cls_commands, main_help, dateToString, stringToDate, isIp, isNetworkIp, isDomain, print_error
from utils.completer import IMCompleter
from core.FormModules.formModule import FormModule
from core.Parameters.parameter import Parameter, BoolParameter, DateParameter, ListParameter, ComboParameter, validateDate
from core.settings import Settings
from core.apiclient import APIClient
from prompt_toolkit.formatted_text import FormattedText


@cls_commands
class NewPentestForm(FormModule):
    def __init__(self, parent_context, prompt_session):
        super().__init__('New Pentest', parent_context, "Fill the pentest options.", FormattedText(
            [('class:title', f"{parent_context.name}"), ("class:subtitle", f" New pentest form"), ("class:angled_bracket", " > ")]), IMCompleter(self), prompt_session)
        self.fields = [
            Parameter("name", required=True,
                      helper="Type the name to give to the new pentest"),

            ComboParameter("pentest_type", list(Settings.getPentestTypes().keys()), required=True, helper="Type one of the pentest type defined in the global settings. It will filter out some context specific commands"),

            DateParameter("start_date", required=True, default=dateToString(datetime.now()), helper="Enter starting time of the pentest (dd/mm/YYYY hh:mm:ss). This impacts auto scan"),

            DateParameter("end_date", required=True, default="31/12/2099 00:00:00",
                      validator=self.validateEndDate,  helper="Enter ending time of the pentest (dd/mm/YYYY hh:mm:ss). This impacts auto scan"),
            ListParameter("scope", required=True, validator=self.validateScope,
                      helper="Enter a list of Comma separated : ips, network ips (use x.x.x.x/y) and/or domains."),
            ListParameter("pentesters", default="", required=False,
                      helper="Enter a list of pentesters name, comma separated."),
            BoolParameter("check_new_domain_ip_scope", default="false", required=False, helper="[true, false] If true, extend scope to any new domain if the ip returned by a DNS query is already in scope"),
            BoolParameter("check_new_domain_tld_in_scope", default="false", required=False, helper="[true, false]  If true, extend scope to any new domain if a parent domain is already in scope"),    
            BoolParameter("add_all_domains_found_in_scope", default="false", required=False, helper="/!\\ [true, false]  If true, extend scope to any new domain found by a tool"),    
        ]

    def validatePentestType(self, value):
        pentest_types = Settings.getPentestTypes().keys()
        if value not in pentest_types:
            return f"{value} is not a validate pentest type, edit settings or choose an existing one ({', '.join(pentest_types)})."
        return ""


    def validateEndDate(self, value):
        res = validateDate(value)
        if res != "":
            return res
        start_date = stringToDate(self.fields[2].getValue())
        end_date = stringToDate(value)
        if not isinstance(start_date, datetime):
            return "start_date field must be correct first"
        if end_date < start_date:
            return "The specified end_date is anterior to specified start_date."
        return ""

    def validateScope(self, value):
        true_value = value.strip()
        if isNetworkIp(true_value) or isIp(true_value):
            return ""
        if isDomain(true_value):
            return ""
        return f"{value} is not a valid domain, IP address or Network IP"


    @command
    def create(self):
        """Usage:  create

        Description: create the new pentest with setted parameters 
        """
        if not super().checkRequiredFields():
            return
        values = Parameter.getParametersValues(self.fields)
        settingsVals = dict()
        settingsVals["Add domains whose IP are in scope"] = int(values["check_new_domain_ip_scope"])
        settingsVals["Add domains who have a parent domain in scope"] = int(values["check_new_domain_tld_in_scope"])
        settingsVals["Add all domains found"] = int(values["add_all_domains_found_in_scope"])
        validCalendar = self.registerPentest(values["name"], values["pentest_type"], values["start_date"], values["end_date"], ",".join(values["scope"]), settingsVals, ",".join(values["pentesters"]))
        if validCalendar:
            self.set_context(self.parent_context)
            self.current_context.open(values["name"])

    def registerPentest(self, dbName, pentest_type, start_date, end_date, scope, settings, pentesters):
        """
        Register the given calendar name into database and opens it.

        Args:
            calendarName: The pentest database name to register in database.
        """
        succeed = False
        if dbName is not None:
            apiclient = APIClient.getInstance()
            succeed, msg = apiclient.registerPentest(dbName, pentest_type, start_date, end_date, scope, settings, pentesters)
            if not succeed:
                print_error(msg)
        return succeed