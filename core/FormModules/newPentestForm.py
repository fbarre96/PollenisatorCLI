import re
from datetime import datetime
from utils.utils import command, cls_commands, main_help, dateToString, stringToDate, isIp, isNetworkIp, print_error
from utils.completer import IMCompleter
from core.FormModules.formModule import FormModule
from core.Parameters.parameter import Parameter, BoolParameter
from core.Parameters.validators import validateDate, validateBool
from core.settings import Settings
from core.apiclient import APIClient
from prompt_toolkit.formatted_text import FormattedText


@cls_commands
class NewPentestForm(FormModule):
    def __init__(self, parent_context, prompt_session):
        super().__init__('New Pentest', parent_context, "Fill the pentest options.", FormattedText(
            [('class:title', f"{parent_context.name}"), ("class:subtitle", f" New pentest form"), ("class:angled_bracket", " > ")]), IMCompleter(self), prompt_session)
        self.fields = [
            Parameter("name", required=True,
                      helper="The name to give to the new pentest"),

            Parameter("pentest_type", required=True, validator=self.validatePentestType,
                      completor=self.getPentestTypes, helper="One of the pentest type defined in the global settings"),

            Parameter("start_date", required=True, default=dateToString(datetime.now()),
                      validator=validateDate, helper="Starting time of the pentest. This impacts auto scan"),

            Parameter("end_date", required=True, default="31/12/2099 00:00:00",
                      validator=self.validateEndDate, helper="Ending time of the pentest. This impacts auto scan"),
            Parameter("scope", required=True, validator=self.validateScope,
                      helper="A list of ip, network ip, domains. Comma separated, use x.x.x.x/y for network ip."),
            Parameter("pentesters", default="", required=False,
                      helper="A list of pentesters name, comma separated."),
            BoolParameter("check_new_domain_ip_scope", default="false", required=False, helper="If true, extend scope to any new domain if the ip returned by a DNS query is already in scope"),
            BoolParameter("check_new_domain_tld_in_scope", default="false", required=False, helper="If true, extend scope to any new domain if a parent domain is already in scope"),    
            BoolParameter("add_all_domains_found_in_scope", default="false", required=False, helper="/!\\ If true, extend scope to any new domain found by a tool"),    
        ]

    def validatePentestType(self, value):
        pentest_types = Settings.getPentestTypes().keys()
        if value not in pentest_types:
            return f"{value} is not a validate pentest type, edit settings or choose an existing one ({', '.join(pentest_types)})."
        return ""


    def validateEndDate(self, value):
        res = validateDate(value)
        if res != "":
            return res
        start_date = stringToDate(self.fields[2])
        end_date = stringToDate(value)
        if not isinstance(start_date, datetime):
            return "start_date field must be correct first"
        if end_date < start_date:
            return "The specified end_date is anterior to specified start_date."
        return ""

    def validateScope(self, value):
        values = value.split(",")
        for value in values:
            true_value = value.strip()
            if isNetworkIp(true_value) or isIp(true_value):
                continue
            elif re.match(r"^((?!-))(xn--)?[a-z0-9][a-z0-9-_]{0,61}[a-z0-9]{0,1}\.(xn--)?([a-z0-9\-]{1,61}|[a-z0-9-]{1,30}\.[a-z]{2,})$", true_value):
                continue
            else:
                return f"{value} is not a valid domain, IP address or Network IP"
        return ""

    def getPentestTypes(self):
        return list(Settings.getPentestTypes().keys())

    @command
    def create(self):
        """Usage:  create

        Description: create the new pentest with setted parameters 
        """
        if not super().checkRequiredFields():
            return
        values = Parameter.getParametersValues(self.fields)
        settingsVals = dict()
        settingsVals["Add domains whose IP are in scope"] = int(values["check_new_domain_ip_scope"])
        settingsVals["Add domains who have a parent domain in scope"] = int(values["check_new_domain_tld_in_scope"])
        settingsVals["Add all domains found"] = int(values["add_all_domains_found_in_scope"])
        validCalendar = self.registerPentest(values["name"], values["pentest_type"], values["start_date"], values["end_date"], values["scope"], settingsVals, values["pentesters"])
        if validCalendar:
            self.set_context(self.parent_context)
            self.current_context.open(values["name"])

    def registerPentest(self, dbName, pentest_type, start_date, end_date, scope, settings, pentesters):
        """
        Register the given calendar name into database and opens it.

        Args:
            calendarName: The pentest database name to register in database.
        """
        succeed = False
        if dbName is not None:
            apiclient = APIClient.getInstance()
            succeed, msg = apiclient.registerPentest(dbName, pentest_type, start_date, end_date, scope, settings, pentesters)
            if not succeed:
                print_error(msg)
        return succeed